Exception Handling in C#
Exception handling is a mechanism in C# to handle runtime errors in a structured way, ensuring the application can gracefully recover or exit. 
The three primary components are the try-catch-finally block, throwing exceptions, and defining custom exceptions.

1. Try-Catch-Finally Block
The try-catch-finally block is used to handle exceptions that occur during runtime.

Syntax
try
{
    // Code that might throw an exception
}
catch (ExceptionType ex)
{
    // Code to handle the exception
}
finally
{
    // Code that always executes, regardless of an exception
}

Example
using System;

class Program
{
    static void Main()
    {
        try
        {
            int[] numbers = { 1, 2, 3 };
            Console.WriteLine(numbers[5]); // IndexOutOfRangeException
        }
        catch (IndexOutOfRangeException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            Console.WriteLine("Execution completed.");
        }
    }
}


2. Throwing Exceptions
Exceptions can be explicitly thrown using the throw keyword.

Example
using System;

class Program
{
    static void Divide(int a, int b)
    {
        if (b == 0)
        {
            throw new DivideByZeroException("Cannot divide by zero.");
        }
        Console.WriteLine($"Result: {a / b}");
    }

    static void Main()
    {
        try
        {
            Divide(10, 0);
        }
        catch (DivideByZeroException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}


3. Custom Exception Classes
Custom exception classes allow you to create exceptions specific to your application logic.

Steps to Create a Custom Exception
Inherit from the Exception class.
Add custom properties or methods if needed.
Use the base constructor to pass the exception message.
Example
using System;

class InvalidAgeException : Exception
{
    public InvalidAgeException(string message) : base(message) { }
}

class Program
{
    static void ValidateAge(int age)
    {
        if (age < 18)
        {
            throw new InvalidAgeException("Age must be 18 or above.");
        }
        Console.WriteLine("Age is valid.");
    }

    static void Main()
    {
        try
        {
            ValidateAge(16);
        }
        catch (InvalidAgeException ex)
        {
            Console.WriteLine($"Custom Exception: {ex.Message}");
        }
    }
}

Real-Time Applications of Exception Handling
File Handling System

Catching exceptions like FileNotFoundException or IOException to notify users about missing files or permission issues.
Example:
try
{
    string content = File.ReadAllText("nonexistentfile.txt");
    Console.WriteLine(content);
}
catch (FileNotFoundException ex)
{
    Console.WriteLine($"File error: {ex.Message}");
}


User Input Validation

Validating user input in forms or applications and throwing exceptions for invalid data.
Example:
try
{
    int age = int.Parse(Console.ReadLine());
    if (age < 0) throw new ArgumentException("Age cannot be negative.");
}
catch (FormatException)
{
    Console.WriteLine("Please enter a valid number.");
}


Database Operations

Handling database exceptions like SqlException for connection issues or query errors.
Example:
try
{
    // Database connection and query logic
}
catch (SqlException ex)
{
    Console.WriteLine($"Database error: {ex.Message}");
}

Best Practices for Exception Handling
Use Specific Exceptions: Always catch specific exceptions before generic ones.

try { /* ... */ }
catch (FileNotFoundException ex) { /* Handle file not found */ }
catch (Exception ex) { /* Handle general exceptions */ }

Avoid Silent Catch Blocks: Do not catch exceptions without handling or logging them.

catch (Exception ex)
{
    Console.WriteLine(ex.Message); // Always log or rethrow exceptions.
}

Use Finally for Cleanup: Use the finally block to release resources like file handles or database connections.
finally
{
    fileStream?.Close();
}
Avoid Overusing Exceptions: Use exceptions for exceptional scenarios, not as a control flow mechanism.

By implementing these practices, exception handling ensures robust and user-friendly applications that can gracefully recover from errors.
